generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Links {
    id          String    @id @default(cuid())
    url         String
    slug        String    @unique
    description String?
    createdAt   DateTime  @default(now())
    createdBy   User?     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId   String
    tag         Tags?     @relation(fields: [tagId], references: [id], onDelete: SetNull)
    tagId       String?
    clicks      Int       @default(0)
    lastClicked DateTime?

    @@index(slug)
    @@index([creatorId])
    @@index([tagId])
}

model Tags {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    createdBy   User?    @relation(fields: [creatorId], references: [id])
    creatorId   String
    links       Links[]

    @@index([creatorId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    username              String?
    email                 String?                @unique
    emailVerified         DateTime?
    image                 String?
    password              String?
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?
    role                  String                 @default("USER")
    accounts              Account[]
    sessions              Session[]
    links                 Links[]
    tags                  Tags[]
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}
